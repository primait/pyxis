---
AWSTemplateFormatVersion: "2010-09-09"
Parameters:
  Environment:
    Type: String
    AllowedValues:
      - staging
      - production
  ReleaseVersion:
    Type: String
  TaskDesiredCount:
    Type: Number
    Default: 2
  HostnamePattern:
    Type: String
  HostnamePatternPriority:
    Type: Number
    Default: 1

Mappings:
  ECSCluster:
    staging:
      id: ecs-cluster-allinone-staging-ECSCluster-1ECKQ785CYFWL
      PyxisCpu: 32
      PyxisRam: 32
      MinServiceSize: 2
      MaxServiceSize: 2
      HealthyThreshold: 10
      DeploymentMaximumPercent: 100
      DeploymentMinimumHealthyPercent: 50
      ALBShortName: pyxis-staging
    production:
      id: ecs-cluster-as-microservices-vpc-production-ECSCluster-NBrZ5IigmJnV
      PyxisCpu: 128
      PyxisRam: 128
      MinServiceSize: 2
      MaxServiceSize: 5
      HealthyThreshold: 10
      DeploymentMaximumPercent: 100
      DeploymentMinimumHealthyPercent: 50
      ALBShortName: pyxis-production

Conditions:
  TaskDesiredCountZero: !Equals [!Ref TaskDesiredCount, 0]

Resources:
  ECSServicePyxis:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !FindInMap [ECSCluster, !Ref Environment, id]
      PlacementStrategies:
        - Field: attribute:ecs.availability-zone
          Type: spread
        - Field: instanceId
          Type: spread
      LaunchType: EC2
      SchedulingStrategy: REPLICA
      DesiredCount:
        !If [TaskDesiredCountZero, !Ref "AWS::NoValue", !Ref TaskDesiredCount]
      TaskDefinition:
        Ref: TaskDefinitionPyxis
      LoadBalancers:
        - ContainerName: pyxis
          ContainerPort: 80
          TargetGroupArn:
            Ref: ApplicationLoadBalancerTargetGroup
      DeploymentConfiguration:
        MaximumPercent:
          Fn::FindInMap:
            - ECSCluster
            - Ref: Environment
            - DeploymentMaximumPercent
        MinimumHealthyPercent:
          Fn::FindInMap:
            - ECSCluster
            - Ref: Environment
            - DeploymentMinimumHealthyPercent
      Role:
        Fn::ImportValue:
          Fn::Sub: ecs-roles-pyxis-${Environment}-service
    DependsOn:
      - ApplicationLoadBalancerHttpsListenerRule

  ECSServicePyxisAutoscalingCpu:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub pyxis-application-autoscaling-cpu-${Environment}
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ECSServicePyxisScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 75.0
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleOutCooldown: 150
        ScaleInCooldown: 300

  ECSServicePyxisAutoscalingMemory:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub pyxis-application-autoscaling-memory-${Environment}
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ECSServicePyxisScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 75.0
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageMemoryUtilization
        ScaleOutCooldown: 150
        ScaleInCooldown: 300

  ECSServicePyxisScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: !FindInMap [ECSCluster, !Ref Environment, MaxServiceSize]
      MinCapacity: !FindInMap [ECSCluster, !Ref Environment, MinServiceSize]
      ResourceId: !Sub
        - service/${ClusterName}/${ECSServicePyxis.Name}
        - { ClusterName: !FindInMap [ECSCluster, !Ref Environment, id] }
      RoleARN: arn:aws:iam::001575623345:role/ecsAutoscaleRole
      ServiceNamespace: ecs
      ScalableDimension: ecs:service:DesiredCount
    DependsOn: ECSServicePyxis

  TaskDefinitionPyxis:
    Type: AWS::ECS::TaskDefinition
    Properties:
      TaskRoleArn:
        Fn::ImportValue:
          Fn::Sub: ecs-roles-pyxis-${Environment}-task
      ContainerDefinitions:
        - Name: pyxis
          Image: 001575623345.dkr.ecr.eu-west-1.amazonaws.com/pyxis:1.12.2-2
          Essential: true
          Cpu: !FindInMap [ECSCluster, !Ref Environment, PyxisCpu]
          MemoryReservation: !FindInMap [ECSCluster, !Ref Environment, PyxisRam]
          PortMappings:
            - ContainerPort: 80
          Environment:
            - Name: AWS_STACK_NAME
              Value:
                Ref: AWS::StackName
            - Name: VERSION
              Value:
                Ref: ReleaseVersion
            - Name: ENV
              Value: !Ref Environment
            - Name: PORT
              Value: "80"
      Volumes:
        - Name: awseb-logs-system
          Host:
            SourcePath: "/var/log"

  ApplicationLoadBalancerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 5
      HealthCheckPath: "/health-check"
      HealthCheckPort: traffic-port
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 4
      HealthyThresholdCount:
        Fn::FindInMap:
          - ECSCluster
          - Ref: Environment
          - HealthyThreshold
      UnhealthyThresholdCount: 2
      Matcher:
        HttpCode: "200"
      Name: !FindInMap [ECSCluster, !Ref Environment, ALBShortName]
      Port: 80
      Protocol: HTTP
      Tags:
        - Key: Name
          Value:
            Ref: AWS::StackName
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: "30"
        - Key: stickiness.enabled
          Value: "true"
        - Key: stickiness.type
          Value: lb_cookie
        - Key: stickiness.lb_cookie.duration_seconds
          Value: "360"
      VpcId:
        Fn::ImportValue: !Sub Vpc-${Environment}

  ApplicationLoadBalancerHttpsListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn:
            Ref: ApplicationLoadBalancerTargetGroup
      Conditions:
        - Field: host-header
          Values:
            - !Ref HostnamePattern
      ListenerArn:
        Fn::ImportValue: !Sub ALBPublicDefaultHttpsListener-http-${Environment}
      Priority: !Ref HostnamePatternPriority

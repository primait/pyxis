#!/usr/bin/env bash

#############################################################################
#                                                                           #
#     DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN     #
#                                                                           #
#############################################################################

# script exit when a command fails
set -o errexit
# catch a command error in pipe execution
set -o pipefail
# exit when try to use undeclared variables
# set -o nounset
# print and expand each command to stdout before executing it
set -o xtrace

function wait_for_artifact() {
  echo -n "Waiting for artifact"
  while true; do
    if ! aws s3 ls s3://prima-artifacts-encrypted/microservices/pyxis/"${VERSION}"-"${ENV}".tar.gz; then
      echo -ne "."
      sleep 10
    else
      echo "Artifact ready!"
      exit 0
    fi
  done
}

function set_task_desired_count() {
  local STACK_NAME=$1
  local SERVICE_LOGIC_NAME=$2
  local CLUSTER_STACK_NAME=$3
  local DEFAULT_TASK_DESIRED_COUNT=$4

  eval ECS_CLUSTER="$(aws --region eu-west-1 cloudformation describe-stack-resource \
    --stack-name "${CLUSTER_STACK_NAME}" --logical-resource-id ECSCluster |
    jq '.StackResourceDetail.PhysicalResourceId')"

  eval ECS_SERVICE="$(aws --region eu-west-1 cloudformation describe-stack-resource \
    --stack-name "${STACK_NAME}" --logical-resource-id "${SERVICE_LOGIC_NAME}" |
    jq '.StackResourceDetail.PhysicalResourceId')"

  eval TASK_DESIRED_COUNT="$(aws --region eu-west-1 ecs describe-services \
    --cluster "${ECS_CLUSTER}" --services "${ECS_SERVICE}" |
    jq '.services[0].desiredCount')"

  if [ -z "$TASK_DESIRED_COUNT" ]; then
    export TASK_DESIRED_COUNT=$DEFAULT_TASK_DESIRED_COUNT
  fi
}

if [ $# -eq 0 ]; then
  echo "Missing required argument: environment"
  exit 1
fi

export ENV=$1
export AWS_DEFAULT_REGION="eu-west-1"
export VERSION="${DRONE_TAG:-$DRONE_COMMIT_SHA}"

if [ "$2" = "--wait-for-artifact" ]; then
  wait_for_artifact
fi

if [ "${ENV}" = "qa" ]; then

  TASK_DESIRED_COUNT=1

  aws cloudformation deploy --no-fail-on-empty-changeset --stack-name "ecs-task-pyxis-qa-${HASH}" \
    --template-file "${PWD}"/deploy/task.yml \
    --parameter-overrides ReleaseVersion="${VERSION}" \
    TaskDesiredCount="${TASK_DESIRED_COUNT}" \
    Environment="${ENV}" \
    ECSClusterName="${ECS_CLUSTER_NAME}" \
    EnvHash="${HASH}" \
    HostnamePatternPriority="62" \
    HostnamePattern="pyxis-${HASH}.qa.colaster.com" \
    ALBShortName="pyxis-qa-${HASH:0:8}" \
    --tags "qainit=${DRONE_BRANCH_FROM_QAINIT}"

elif

  [ "${ENV}" = "staging" ]
then

  TASK_DESIRED_COUNT=2

  aws cloudformation deploy --no-fail-on-empty-changeset --stack-name "ecs-task-pyxis-staging" \
    --template-file "${PWD}"/deploy/task.yml \
    --parameter-overrides ReleaseVersion="${VERSION}" \
    TaskDesiredCount="${TASK_DESIRED_COUNT}" \
    Environment="${ENV}" \
    HostnamePatternPriority="400" \
    HostnamePattern="staging.prima.design"

elif
  [ "${ENV}" = "production" ]
then

  set_task_desired_count "ecs-task-pyxis-production" "ECSServicePyxis" "ecs-cluster-as-microservices-vpc-production" "2"

  aws cloudformation deploy --no-fail-on-empty-changeset --stack-name "ecs-task-pyxis-production" \
    --template-file "${PWD}"/deploy/task.yml \
    --parameter-overrides ReleaseVersion="${VERSION}" \
    TaskDesiredCount="${TASK_DESIRED_COUNT}" \
    Environment="${ENV}" \
    HostnamePatternPriority="400" \
    HostnamePattern="prima.design"

else

  echo "${ENV} not supported!"
  exit 1
fi

#!/bin/bash

# script exit when a command fails
set -o errexit
# catch a command error in pipe execution
set -o pipefail
# exit when try to use undeclared variables
# set -o nounset

set -x

if [ $1 -eq 0 ]; then
  echo "Devi passare come argomento l'env da utilizzare, staging o production"
  exit 1
elif [ $1 -eq "production" ] && [ $2 -eq 0 ]; then
  echo "Devi passare il tag come secondo argomento"
  exit 1
fi

ENV=$1
GIT_REV=$(git rev-parse --verify HEAD | cut -b 1-15)

if [ "$ENV" = "staging" ]; then
  HOSTNAME_PRIORITY="6001"
  HOSTNAME_PATTERN="pyxis-staging.prima.it"
  VERSION=${GIT_REV}
  CLUSTER_STACK_NAME="ecs-cluster-allinone-${ENV}"
  SERVICE_LOGIC_NAME="ECSServicePyxis"

  echo "deploying $ENV"
  tar czf ${VERSION}-${ENV}.tar.gz -C dist/pyxis-site .
  aws --region="eu-west-1" s3 cp ${VERSION}-${ENV}.tar.gz s3://prima-artifacts-encrypted/microservices/pyxis/${VERSION}-${ENV}.tar.gz

  set +e
  aws --region="eu-west-1" cloudformation describe-stacks --stack-name ecs-task-pyxis-"${ENV}" > /dev/null

  if [ $? -eq 0 ]; then
    ACTION="update-stack"
  else
    ACTION="create-stack"
  fi

  ECS_CLUSTER=$(aws --region eu-west-1 cloudformation describe-stack-resource \
    --stack-name ${CLUSTER_STACK_NAME} --logical-resource-id ECSCluster \
    | python -c 'import json,sys;obj=json.load(sys.stdin);print obj["StackResourceDetail"]["PhysicalResourceId"]')

  ECS_SERVICE=$(aws --region eu-west-1 cloudformation describe-stack-resource \
    --stack-name ecs-task-pyxis-${ENV} --logical-resource-id ${SERVICE_LOGIC_NAME} \
    | python -c 'import json,sys;obj=json.load(sys.stdin);print obj["StackResourceDetail"]["PhysicalResourceId"]')

  TASK_DESIRED_COUNT=$(aws --region eu-west-1 ecs describe-services \
    --cluster ${ECS_CLUSTER} --services ${ECS_SERVICE} \
    | python -c 'import json,sys;obj=json.load(sys.stdin);print obj["services"][0]["desiredCount"]')

  if [ -z "$TASK_DESIRED_COUNT" ]; then
    TASK_DESIRED_COUNT=2
  fi

  set -e

  aws --region="eu-west-1" cloudformation ${ACTION} --stack-name ecs-task-pyxis-"${ENV}" \
    --template-body file://$PWD/deploy/task.yml \
    --parameters ParameterKey=ReleaseVersion,ParameterValue=${VERSION} \
                ParameterKey=Environment,ParameterValue=${ENV} \
                ParameterKey=TaskDesiredCount,ParameterValue=${TASK_DESIRED_COUNT} \
                ParameterKey=HostnamePatternPriority,ParameterValue=${HOSTNAME_PRIORITY} \
                ParameterKey=HostnamePattern,ParameterValue=${HOSTNAME_PATTERN} \
    --capabilities CAPABILITY_IAM

elif [ "$ENV" = "production" ]; then
  VERSION=$2
  echo "deploying $ENV"
  aws --region="eu-west-1" s3 cp --acl public-read dist/pyxis-css/prima.css s3://prima-documents-assets/pyxis/${VERSION}/prima.css
  aws --region="eu-west-1" s3 cp --acl public-read dist/pyxis-css/primaGuarantees.css s3://prima-documents-assets/pyxis/${VERSION}/primaGuarantees.css
  #aws --region="eu-west-1" s3 cp --acl public-read dist/pyxis-sass/primaThankYou.css s3://prima-documents-assets/css/pyxisThankYou-${VERSION}.css
  #aws --region="eu-west-1" s3 cp --acl public-read dist/pyxis-sass/primaPayments.css s3://prima-documents-assets/css/pyxisPayments-${VERSION}.css
  aws --region="eu-west-1" s3 sync --acl public-read dist/pyxis-css/assets/ s3://prima-documents-assets/pyxis/${VERSION}/assets/
else
  echo "${ENV} non supportato!"
  exit 1
fi

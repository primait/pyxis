#!/usr/bin/env bash

#############################################################################
#                                                                           #
#     DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN     #
#                                                                           #
#############################################################################

# script exit when a command fails
set -o errexit
# catch a command error in pipe execution
set -o pipefail
# exit when try to use undeclared variables
# set -o nounset
# print and expand each command to stdout before executing it
set -o xtrace

if [ $# -eq 0 ]; then
  echo "Missing required argument: environment"
  exit 1
fi

VERSION=$2
if [ -z "${VERSION}" ]; then
  VERSION="${DRONE_COMMIT_SHA:-unknown}"
fi
export VERSION

export ENV=$1

yarn run release
tar czf ${VERSION}-${ENV}.tar.gz -C dist .
aws --region="eu-west-1" s3 cp "${VERSION}"-"${ENV}".tar.gz s3://prima-artifacts-encrypted/microservices/pyxis/"${VERSION}"-"${ENV}".tar.gz

function get_action() {
  local STACK_NAME=$1
  local SERVICE_LOGIC_NAME=$2
  local CLUSTER_STACK_NAME=$3
  ACTION=""

  if ! aws --region="eu-west-1" cloudformation describe-stacks --stack-name "${STACK_NAME}" >/dev/null; then
    ACTION="create-stack"
  else
    ACTION="update-stack"

    if [ -n "${SERVICE_LOGIC_NAME}" ]; then

      eval ECS_CLUSTER="$(aws --region eu-west-1 cloudformation describe-stack-resource \
        --stack-name "${CLUSTER_STACK_NAME}" --logical-resource-id ECSCluster |
        jq '.StackResourceDetail.PhysicalResourceId')"

      eval ECS_SERVICE="$(aws --region eu-west-1 cloudformation describe-stack-resource \
        --stack-name "${STACK_NAME}" --logical-resource-id "${SERVICE_LOGIC_NAME}" |
        jq '.StackResourceDetail.PhysicalResourceId')"

      eval TASK_DESIRED_COUNT="$(aws --region eu-west-1 ecs describe-services \
        --cluster "${ECS_CLUSTER}" --services "${ECS_SERVICE}" |
        jq '.services[0].desiredCount')"
    fi

  fi
}

if [ "${ENV}" = "staging" ]; then

  TASK_DESIRED_COUNT="2"

  get_action "ecs-task-pyxis-staging" "ECSServicePyxis" "ecs-cluster-allinone-staging"

  aws --region="eu-west-1" cloudformation "${ACTION}" --stack-name "ecs-task-pyxis-staging" \
    --template-body file://"${PWD}"/deploy/task.yml \
    --parameters ParameterKey=ReleaseVersion,ParameterValue="${VERSION}" \
    ParameterKey=TaskDesiredCount,ParameterValue="${TASK_DESIRED_COUNT}" \
    ParameterKey=Environment,ParameterValue="${ENV}" \
    ParameterKey=HostnamePatternPriority,ParameterValue="400" \
    ParameterKey=HostnamePattern,ParameterValue="staging.prima.design"

elif [ "${ENV}" = "production" ]; then

  TASK_DESIRED_COUNT="2"

  get_action "ecs-task-pyxis-production" "ECSServicePyxis" "ecs-cluster-as-microservices-vpc-production"

  aws --region="eu-west-1" cloudformation "${ACTION}" --stack-name "ecs-task-pyxis-production" \
    --template-body file://"${PWD}"/deploy/task.yml \
    --parameters ParameterKey=ReleaseVersion,ParameterValue="${VERSION}" \
    ParameterKey=TaskDesiredCount,ParameterValue="${TASK_DESIRED_COUNT}" \
    ParameterKey=Environment,ParameterValue="${ENV}" \
    ParameterKey=HostnamePatternPriority,ParameterValue="400" \
    ParameterKey=HostnamePattern,ParameterValue="prima.design"

else
  echo "${ENV} non supportato!"
  exit 1
fi

#!/bin/bash

# script exit when a command fails
set -o errexit
# catch a command error in pipe execution
set -o pipefail
# exit when try to use undeclared variables
# set -o nounset
# print and expand each command to stdout before executing it
set -o xtrace

if [ $# -eq 0 ]; then
  echo "Devi passare come argomento l'env da utilizzare, staging o production"
  exit 1
elif [ "$1" = "production" ] && [ "$2" -eq 0 ]; then
  echo "Devi passare il tag come secondo argomento"
  exit 1
fi

ENV=$1
VERSION=$2

if [ -z "${VERSION}" ]; then
  VERSION="${DRONE_COMMIT_SHA:-unknown}"
fi

if [ "$ENV" = "staging" ]; then
  HOSTNAME_PRIORITY="400"
  HOSTNAME_PATTERN="staging.prima.design"
  CLUSTER_STACK_NAME="ecs-cluster-allinone-${ENV}"
  SERVICE_LOGIC_NAME="ECSServicePyxis"
  TASK_DESIRED_COUNT="2"
elif [ "$ENV" = "production" ]; then
  HOSTNAME_PRIORITY="400"
  HOSTNAME_PATTERN="prima.design"
  CLUSTER_STACK_NAME="ecs-cluster-as-microservices-vpc-${ENV}"
  TASK_DESIRED_COUNT="2"

  echo "deploying ${ENV}"
  #aws --region="eu-west-1" s3 cp --acl public-read dist/pyxis-css/prima.css s3://prima-documents-assets/pyxis/${VERSION}/prima.css
  #aws --region="eu-west-1" s3 cp --acl public-read dist/pyxis-css/primaGuarantees.css s3://prima-documents-assets/pyxis/${VERSION}/primaGuarantees.css
  #aws --region="eu-west-1" s3 cp --acl public-read dist/pyxis-sass/primaThankYou.css s3://prima-documents-assets/css/pyxisThankYou-${VERSION}.css
  #aws --region="eu-west-1" s3 cp --acl public-read dist/pyxis-sass/primaPayments.css s3://prima-documents-assets/css/pyxisPayments-${VERSION}.css
  #aws --region="eu-west-1" s3 sync --acl public-read dist/pyxis-css/assets/ s3://prima-documents-assets/pyxis/${VERSION}/assets/
else
  echo "${ENV} non supportato!"
  exit 1
fi

echo "deploying ${ENV}"
tar czf "${VERSION}"-"${ENV}".tar.gz -C dist/pyxis-site .
aws --region="eu-west-1" s3 cp "${VERSION}"-"${ENV}".tar.gz s3://prima-artifacts-encrypted/microservices/pyxis/"${VERSION}"-"${ENV}".tar.gz

function get_action() {
  local STACK_NAME=$1
  local SERVICE_LOGIC_NAME=$2
  ACTION=""

  if ! aws --region="eu-west-1" cloudformation describe-stacks --stack-name "${STACK_NAME}" >/dev/null; then
    ACTION="create-stack"
  else
    ACTION="update-stack"

    if [ -n "${SERVICE_LOGIC_NAME}" ]; then

      eval ECS_CLUSTER="$(aws --region eu-west-1 cloudformation describe-stack-resource \
        --stack-name "${CLUSTER_STACK_NAME}" --logical-resource-id ECSCluster |
        jq '.StackResourceDetail.PhysicalResourceId')"

      eval ECS_SERVICE="$(aws --region eu-west-1 cloudformation describe-stack-resource \
        --stack-name "${STACK_NAME}" --logical-resource-id "${SERVICE_LOGIC_NAME}" |
        jq '.StackResourceDetail.PhysicalResourceId')"

      eval TASK_DESIRED_COUNT="$(aws --region eu-west-1 ecs describe-services \
        --cluster "${ECS_CLUSTER}" --services "${ECS_SERVICE}" |
        jq '.services[0].desiredCount')"
    fi

  fi
}

# get_action "ecs-task-pyxis-${ENV}" "ECSServicePyxis"
get_action "ecs-task-pyxis-${ENV}"

aws --region="eu-west-1" cloudformation "${ACTION}" --stack-name "ecs-task-pyxis-${ENV}" \
  --template-body file://"${PWD}"/deploy/task.yml \
  --parameters ParameterKey=ReleaseVersion,ParameterValue="${VERSION}" \
  ParameterKey=Environment,ParameterValue="${ENV}" \
  ParameterKey=TaskDesiredCount,ParameterValue="${TASK_DESIRED_COUNT}" \
  ParameterKey=HostnamePatternPriority,ParameterValue="${HOSTNAME_PRIORITY}" \
  ParameterKey=HostnamePattern,ParameterValue="${HOSTNAME_PATTERN}" \
  --capabilities CAPABILITY_IAM
